#!/usr/bin/env python
import serial
import os, sys

def uint32(b0,b1,b2,b3):
    return (b3 << 24) + (b2 << 16) + (b1 << 8) + b0

def uint16(b0,b1):
    return (b1 << 8) + b0

class MyApp:
    def __init__(self):
        port = os.environ.get('LAG_TEST_PORT', '/dev/ttyUSB0' )
        self.ser = serial.Serial(port=port,
                                 timeout=0.1,
                                 baudrate=115200,
                                 )
        self.ser.open()

    def run(self):
        buf = ''
        while 1:
            buf += self.ser.read()
            while len(buf) > 9:
                buf = self._h(buf)

    def _h(self,buf):
        result = buf
        if len(buf) >= 9:
            valid = False
            #print repr(buf)

            if buf[0] == 'H':
                bytes = [ord(char) for char in buf[1:9]]
                adc = bytes[0]
                e0,e1,e2,e3 = bytes[1:5]
                t0,t1 = bytes[5:7]
                expected_chksum = bytes[7]
                actual_chksum = sum( bytes[:7] ) % 256
                #print bytes

                if actual_chksum == expected_chksum:
                    valid = True
                    print '%d,%d,%d'%(adc, uint32(e0,e1,e2,e3), uint16(t0,t1) )

            if valid:
                #print 'valid'
                result = buf[9:]

            if not valid:
                #print 'not valid'
                result = buf[1:] # ignore this potential start and do a frame-shift

        return result

if __name__=='__main__':
    app=MyApp()
    app.run()
